<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 嘉嘉的博客</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on 嘉嘉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 03 Nov 2019 23:49:18 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《CSS知识总结》</title>
      <link>http://example.org/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 03 Nov 2019 23:49:18 +0800</pubDate>
      
      <guid>http://example.org/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>CSS动画 动画是指许多静止的画面（帧）以一定的速度（如每秒30张）连续播放时，肉眼因视觉残像产生错觉，而误以为是活动的画面。
帧是指每个静止的画面；
播放速度：每秒24帧（影视）或者每秒30帧（游戏）
如将一个div从左往右移动，这中间会涉及到重新布局、绘制、合成；当然这要根据实际情况有可能布局、绘制会被省略。既然说到浏览器的渲染，那我们就来给他深入的学习一下！
浏览器的渲染过程 （1）根据HTML构建HTML树，DOM；
（2）根据CSS构建CSS树，CSSOM；
（3）将两棵树合并成一颗渲染树，Render tree；
（4）layout布局 （文档流、盒模型、计算大小和位置）
（5）paint绘制 （把边框颜色、文字颜色、阴影等画出来）
（6）compose合成 （根据层叠关系展示画面）
三棵树 ￼
刚刚在渲染过程中，有提到省略某些步骤；下面我们来具体说说在什么情况下这些可以被省略。
1.如果您修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏览器将必须检查所有其他元素，然后“自动重排”页面。任何受影响的部分都需要重新绘制，而且最终绘制的元素需进行合成。
￼2.如果您修改“paint only”属性（例如背景图片、文字颜色或阴影等），即不会影响页面布局的属性，则浏览器会跳过布局，但仍将执行绘制。
￼3.如果您更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成。 这个最后的版本开销最小，最适合于应用生命周期中的高压力点，例如动画或滚动。
￼
讲了这么多，那到底CSS动画该如何制作呢？下面以跳动的心为实列，来具体给大家阐述CSS 动画的两种做法（transition 和 animation） transition
animation
transition (详细请查看MDN) 作用：补充中间帧
语法
transition：属性名 时长 过渡方式 延迟
transition：left 200ms linear
可以用逗号分隔两个不同属性
transition：left 200ms,top 400ms
可以用all代表所有属性
transition:all 200ms
过度方式有：linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier/setp-start/step-end/steps
注意：不是所有属性都能过渡
display: none=&amp;gt;block没法过渡
一般改成visibility: hidden=&amp;gt;visible
animation (详细请查看MDN) 两种完整语法
@keyframes slidein { from{ transform: translateX(0%); } to { transform: translateX(100%); } }  @keyframes identifier { 0% {top: 0;left;0;} 30% {top:50px;} 68%,72% {left:50px;} 100% {top:100px;left:100%;} }  缩写语法</description>
    </item>
    
    <item>
      <title>《HTML常用标签》</title>
      <link>http://example.org/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 13 Sep 2019 23:49:18 +0800</pubDate>
      
      <guid>http://example.org/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>a 标签的用法 a 标签的属性： 前言
做前端的一定要像用户一样打开自己的html页面，绝对不能双击打开页面！！！
那怎么操作呢？
打开终端
输入 &amp;lsquo;hs -c-1&amp;rsquo;，或者输入&amp;rsquo;parcel 文件名&amp;rsquo;。
就会生成本地的域名，我们就能像用户一样输入网址来进入页面了。
. href，写网址。取值如下：
 网址：//google.com（会自动适应 https 或 http）
 路径
  /a/b/c 以及 a/b/c。如果我们开启 http 服务，那么/a/b/c 的根目录就不是硬盘的根目录，你在哪里开的 http 服务哪里就是根目录。
index.html 以及./index.html。
 伪协议  javascript:代码;（写一个点击后不刷新页面不跳转的 a 标签，就可以加 javascript:;）
mailto:邮箱（点击 a 标签后，直接跳转到发邮件的页面，并且自动补全此邮箱地址）
tel:手机号（点击此 a 标签，会弹出一个界面，可直接拨打此手机号。该技巧可以用在简历上）
 id，href=#xxx。  a 标签的作用：跳转外部页面，跳转内部锚点，跳转到邮箱或电话等
target，指定在哪个窗口打开你的超链接。取值如下：
 一般使用 _blank ，表示在空白页打开。
 默认值是_self，表示在当前页面打开。
 _top，当文件引用另一个文件，并且另一个文件里面有一个链接，target 的值为_top，这时在页面上点击这个链接会在该引用文件的顶级窗口打开。
 _parent，当文件引用另一个文件，另一个文件再引用一个文件，并且这再一个文件里面有链接，target 的值为_parent，这时在页面上点击这个链接会在该引用文件的上一级窗口打开。
 xxx，如果有一个叫做 xxx 的窗口，点击 a 链接时就在 xxx 窗口打开，如果没有叫 xxx 的窗口，就创建一个叫 xxx 的窗口。怎么验证呢？打开chrome浏览器控制台，输入 window.</description>
    </item>
    
    <item>
      <title>《HTML入门笔记1》</title>
      <link>http://example.org/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 06 Sep 2019 23:49:18 +0800</pubDate>
      
      <guid>http://example.org/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>HTML到底是谁发明的？ 在1990年左右，英国人Tim Berners-Lee创造了html，便于记忆，我们都俗称他为李爵士。
HTML的起手应该写啥呢？ 输入一个英文的!（注意是英文输入法的!），在按tab键，就能把HTML的默认起手式显示出来。一般把lang=&amp;ldquo;en&amp;rdquo;中的&amp;rdquo;en&amp;rdquo;改成&amp;rdquo;zh-CN&amp;rdquo;即可，其他都不用改。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;	&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  html常用的表章节的标签有哪些？它们的意思？ . h1~h6（标题）
. section（章节）
. article（文章）
. p（段落）
. header（头部）
. footer（脚部）
. main（主要内容）
. aside（旁支内容） 一般用来写导航栏
. div（划分）
html全局属性有哪些？ 全局属性指的是所有标签都有的属性
. class 给标签一个标记
. contenteditable 使任何一个元素可以被编辑
. hidden 让任何东西看不见
. id 也是给标签一个标记(注意：不到万不得已不要用id，因为id不报错)
. style 每个元素可以写个style属性
. tabindex 控制tab键的顺序
. title 鼠标放在省略号时会显示完整的内容
html常用的内容标签有哪些？它们的意思？ .</description>
    </item>
    
    <item>
      <title>第四篇博客</title>
      <link>http://example.org/posts/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2-/</link>
      <pubDate>Wed, 04 Sep 2019 23:49:18 +0800</pubDate>
      
      <guid>http://example.org/posts/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2-/</guid>
      <description>开始写第四篇了。 先打卡，再学习。 大家为我加油吧，耶耶耶！！！</description>
    </item>
    
    <item>
      <title>第三篇博客</title>
      <link>http://example.org/posts/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 03 Sep 2019 23:49:18 +0800</pubDate>
      
      <guid>http://example.org/posts/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>开始写第三篇了。 大家为我加油吧，耶耶耶！！！</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Mon, 02 Sep 2019 23:07:23 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望我能写出好的文章给大家看。</description>
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://example.org/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <pubDate>Mon, 02 Sep 2019 23:07:23 +0800</pubDate>
      
      <guid>http://example.org/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      <description>又见面了 Hugo的博客问题得到进一步解决了，真开心。</description>
    </item>
    
  </channel>
</rss>